import 'dart:async';
import 'dart:ui';

import 'package:atoz_app/game/atoz_game.dart';
import 'package:atoz_app/game/objects/game_object.dart';
import 'package:flame/components.dart';
import 'package:flame/palette.dart';
import 'package:flame/sprite.dart';
import 'package:flutter/material.dart';

class HUD extends GameObject {
  HUD({
    super.size,
    super.position,
  });

  final regular = TextPaint(
    style: TextStyle(
      fontSize: 48.0,
      color: BasicPalette.white.color,
    ),
  );

  late final SpriteSheet _heartSprite;
  late final SpriteSheet _fishSprite;

  @override
  FutureOr<void> onLoad() async {
    priority = 100000;

    _loadSprites();

    return super.onLoad();
  }

  @override
  void render(Canvas canvas) {
    if (game.gameState == GameState.inDialogue) {
      _renderDialogueBox(canvas);
      return;
    }
    _renderHeart(canvas);
    _renderFishCount(canvas);
    super.render(canvas);
  }

  @override
  void update(double dt) {
    if (game.gameState == GameState.paused ||
        game.gameState == GameState.inDialogue) {
      return;
    }
    super.update(dt);
  }

  void _loadSprites() {
    _heartSprite = SpriteSheet(
      image: game.images.fromCache('HUD/Heart.png'),
      srcSize: Vector2(14, 14),
      spacing: 2,
      margin: 1,
    );
    _fishSprite = SpriteSheet(
      image: game.images.fromCache('Actor/Animals/Fish/FacesetRed2.png'),
      srcSize: Vector2(38, 38),
      // spacing: 2,
      // margin: 1,
    );
  }

  void _renderDialogueBox(Canvas canvas) {
    // Dialogue box only gets render when current game state is GameState.inDialogue

    double camPositionX = game.cam.viewfinder.position.x - game.size.x / 2;
    double camPositionY = game.cam.viewfinder.position.y - game.size.y / 2;

    double padding = 30;
    double height = 120;

    final rectWhite = RRect.fromRectAndRadius(
      Rect.fromLTWH(
        camPositionX + padding * 3,
        camPositionY + padding,
        game.size.x - padding * 6,
        height,
      ),
      Radius.circular(10),
    );

    final rectBlack = RRect.fromRectAndRadius(
      Rect.fromLTWH(
        camPositionX + padding * 3,
        camPositionY + padding,
        game.size.x - padding * 6,
        height,
      ),
      Radius.circular(10),
    );

    canvas.drawRRect(
      rectBlack,
      Paint()
        ..color = Colors.black.withOpacity(0.5)
        ..style = PaintingStyle.fill,
    );
    canvas.drawRRect(
      rectWhite,
      Paint()
        ..color = Colors.white
        ..style = PaintingStyle.stroke
        ..strokeWidth = 2,
    );

    // Draw text (generated by chatgpt)
    // doesn't work with long text yet
    TextSpan textSpan = TextSpan(
      text: game.question,
      style: TextStyle(
        color: Colors.white,
        fontSize: 16,
        fontWeight: FontWeight.normal,
      ),
    );

    TextPainter textPainter = TextPainter(
      text: textSpan,
      textDirection: TextDirection.ltr,
    );

    textPainter.layout();
    textPainter.paint(
      canvas,
      Offset(
        camPositionX + padding * 3 + 20, // Adjust X position as needed
        camPositionY + padding + 20, // Adjust Y position as needed
      ),
    );
  }

  void _renderHeart(Canvas canvas) {
    double camPositionX = game.cam.viewfinder.position.x - game.size.x / 2;
    double camPositionY = game.cam.viewfinder.position.y - game.size.y / 2;

    int heartCount = 0;

    for (int i = 1; i <= game.player.currentLife; i++) {
      if (i % 2 == 0) {
        _heartSprite.getSprite(0, 0).render(
              canvas,
              position: Vector2(
                  camPositionX + 40 + 35 * heartCount, camPositionY + 20),
              size: Vector2(32, 32),
            );
        heartCount++;
      }
    }
    if (game.player.currentLife % 2 != 0) {
      _heartSprite.getSprite(0, 2).render(
            canvas,
            position:
                Vector2(camPositionX + 40 + 35 * heartCount, camPositionY + 20),
            size: Vector2(32, 32),
          );
    }
  }

  void _renderFishCount(Canvas canvas) {
    double camPositionX = game.cam.viewfinder.position.x - game.size.x / 2;
    double camPositionY = game.cam.viewfinder.position.y - game.size.y / 2;

    _fishSprite.getSprite(0, 0).render(
          canvas,
          position: Vector2(camPositionX + 40, camPositionY + 60),
          size: Vector2(32, 32),
        );

    TextSpan textSpan = TextSpan(
      text: 'x${game.player.fishCount}',
      style: TextStyle(
        color: Colors.white,
        fontSize: 24,
        fontWeight: FontWeight.normal,
      ),
    );

    TextPainter textPainter = TextPainter(
      text: textSpan,
      textDirection: TextDirection.ltr,
    );

    textPainter.layout();
    textPainter.paint(
      canvas,
      Offset(
        camPositionX + 80, // Adjust X position as needed
        camPositionY + 60, // Adjust Y position as needed
      ),
    );
  }
}
